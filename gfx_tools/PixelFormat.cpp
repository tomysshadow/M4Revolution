#include "PixelFormat.h"
#include <map>

namespace gfx_tools {
	PixelFormat PixelFormat::m_formatDescriptionTable[] = {
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,  0, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000FF0000, 0x000000000000FF00, 0x00000000000000FF, 0x0000000000000000, 0x0000000000000000, 24, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000FF0000, 0x000000000000FF00, 0x00000000000000FF, 0x00000000FF000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000FF0000, 0x000000000000FF00, 0x00000000000000FF, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000F800, 0x00000000000007E0, 0x000000000000001F, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000007C00, 0x00000000000003E0, 0x000000000000001F, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000007C00, 0x00000000000003E0, 0x000000000000001F, 0x0000000000008000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000F00, 0x00000000000000F0, 0x000000000000000F, 0x000000000000F000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x00000000000000E0, 0x000000000000001C, 0x0000000000000003, 0x0000000000000000, 0x0000000000000000,  8, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000000000000FF, 0x0000000000000000,  8, 0x0000000000000000, 0x0000000000000000},
		{0x00000000000000E0, 0x000000000000001C, 0x0000000000000003, 0x000000000000FF00, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000F00, 0x00000000000000F0, 0x000000000000000F, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x00000000000003FF, 0x00000000000FFC00, 0x000000003FF00000, 0x00000000C0000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000FFFF, 0x00000000FFFF0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000000000000FF00, 0x00000000000000FF, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000000000000FF,  8, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,  8, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,  8, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000000F, 0x000000000000000F, 0x000000000000000F, 0x000000000000000F, 0x0000000000000000,  4, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,  0, 0x0000000000000000, 0x0000000000000000},
		{0x00000000000000FF, 0x00000000000000FF, 0x00000000000000FF, 0x00000000000000FF, 0x0000000000000000,  8, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,  0, 0x0000000000000000, 0x0000000000000000},
		{0x00000000000000FF, 0x00000000000000FF, 0x00000000000000FF, 0x00000000000000FF, 0x0000000000000000,  8, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 16, 0x000000000000FFFF, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x00000000FFFFFFFF, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 16, 0x000000000000FFFE, 0x0000000000000001},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x00000000FFFFFF00, 0x00000000000000FF},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 16, 0x000000000000FFFF, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x00000000FFFFFF00, 0x0000000000000000},
		{0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 32, 0x00000000FFFFFF00, 0x000000000000000F},
		{0x00000000000000FF, 0x000000000000FF00, 0x0000000000FF0000, 0x0000000000000000, 0x0000000000000000, 24, 0x0000000000000000, 0x0000000000000000},
		{0x00000000000000FF, 0x000000000000FF00, 0x0000000000FF0000, 0x00000000FF000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x00000000000000FF, 0x000000000000FF00, 0x0000000000FF0000, 0x0000000000000000, 0x0000000000000000, 32, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000001F, 0x00000000000007E0, 0x000000000000F800, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000001F, 0x00000000000003E0, 0x0000000000007C00, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000001F, 0x00000000000003E0, 0x0000000000007C00, 0x0000000000008000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000000F, 0x00000000000000F0, 0x0000000000000F00, 0x000000000000F000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000007, 0x0000000000000038, 0x00000000000000C0, 0x0000000000000000, 0x0000000000000000,  8, 0x0000000000000000, 0x0000000000000000},
		{0x0000000000000007, 0x0000000000000038, 0x00000000000000C0, 0x000000000000FF00, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000},
		{0x000000000000000F, 0x00000000000000F0, 0x0000000000000F00, 0x0000000000000000, 0x0000000000000000, 16, 0x0000000000000000, 0x0000000000000000}
	};

	char* PixelFormat::ms_formatNames[] = {
		"PIXELFORMAT_UNKNOWN",
		"PIXELFORMAT_RGB_888",
		"PIXELFORMAT_ARGB_8888",
		"PIXELFORMAT_XRGB_8888",
		"PIXELFORMAT_RGB_565",
		"PIXELFORMAT_XRGB_1555",
		"PIXELFORMAT_ARGB_1555",
		"PIXELFORMAT_ARGB_4444",
		"PIXELFORMAT_RGB_332",
		"PIXELFORMAT_A_8",
		"PIXELFORMAT_ARGB_8332",
		"PIXELFORMAT_XRGB_4444",
		"PIXELFORMAT_ABGR_2_10_10_10",
		"PIXELFORMAT_GR_16_16",
		"PIXELFORMAT_AP_88",
		"PIXELFORMAT_P_8",
		"PIXELFORMAT_L_8",
		"PIXELFORMAT_AL_88",
		"PIXELFORMAT_AL_44",
		"PIXELFORMAT_VU_88",
		"PIXELFORMAT_LVU_655",
		"PIXELFORMAT_XLVU_8888",
		"PIXELFORMAT_QWVU_8888",
		"PIXELFORMAT_VU_16_16",
		"PIXELFORMAT_AWVU_2_10_10_10",
		"PIXELFORMAT_UYVY_8888",
		"PIXELFORMAT_YUY2_8888",
		"PIXELFORMAT_DXT1",
		"PIXELFORMAT_DXT2",
		"PIXELFORMAT_DXT3",
		"PIXELFORMAT_DXT4",
		"PIXELFORMAT_DXT5",
		"PIXELFORMAT_D_16_LOCKABLE",
		"PIXELFORMAT_D_32",
		"PIXELFORMAT_DS_15_1",
		"PIXELFORMAT_DS_24_8",
		"PIXELFORMAT_D_16",
		"PIXELFORMAT_DX_24_8",
		"PIXELFORMAT_DXS_24_4_4",
		"PIXELFORMAT_BGR_888",
		"PIXELFORMAT_ABGR_8888",
		"PIXELFORMAT_XBGR_8888",
		"PIXELFORMAT_BGR_565",
		"PIXELFORMAT_XBGR_1555",
		"PIXELFORMAT_ABGR_1555",
		"PIXELFORMAT_ABGR_4444",
		"PIXELFORMAT_BGR_233",
		"PIXELFORMAT_ABGR_8233",
		"PIXELFORMAT_XBGR_4444"
	};

	PixelFormat::PixelFormat() {
	}

	PixelFormat::PixelFormat(
		MASK maskRed,
		MASK maskGreen,
		MASK maskBlue,
		MASK maskAlpha,
		MASK maskPalette,
		BITS_PER_PIXEL bitsPerPixel,
		MASK maskDepth,
		MASK maskStencil
	)
	: maskRed(maskRed),
	maskGreen(maskGreen),
	maskBlue(maskBlue),
	maskAlpha(maskAlpha),
	maskPalette(maskPalette),
	bitsPerPixel(bitsPerPixel),
	maskDepth(maskDepth),
	maskStencil(maskStencil),
	hasColor(maskRed || maskGreen || maskBlue || maskAlpha),
	hasBitsPerPixel(bitsPerPixel) {
	}

	bool PixelFormat::HasRed() {
		return maskRed;
	}

	bool PixelFormat::HasGreen() {
		return maskGreen;
	}

	bool PixelFormat::HasBlue() {
		return maskBlue;
	}

	bool PixelFormat::HasAlpha() {
		return maskAlpha;
	}

	bool PixelFormat::HasPalette() {
		return maskPalette;
	}

	bool PixelFormat::HasDepth() {
		return maskDepth;
	}

	bool PixelFormat::HasStencil() {
		return maskStencil;
	}

	bool PixelFormat::HasColor() {
		return hasColor;
	}

	bool PixelFormat::HasBitsPerPixel() {
		return hasBitsPerPixel;
	}

	PixelFormat::MASK PixelFormat::GetMaskRed() {
		return maskRed;
	}

	PixelFormat::MASK PixelFormat::GetMaskGreen() {
		return maskGreen;
	}

	PixelFormat::MASK PixelFormat::GetMaskBlue() {
		return maskBlue;
	}

	PixelFormat::MASK PixelFormat::GetMaskAlpha() {
		return maskAlpha;
	}

	PixelFormat::MASK PixelFormat::GetMaskPalette() {
		return maskPalette;
	}

	PixelFormat::BITS_PER_PIXEL PixelFormat::GetBitsPerPixel() {
		return bitsPerPixel;
	}

	PixelFormat::MASK PixelFormat::GetMaskDepth() {
		return maskDepth;
	}

	PixelFormat::MASK PixelFormat::GetMaskStencil() {
		return maskStencil;
	}

	PixelFormat* PixelFormat::GetPixelFormat(EnumPixelFormat enumPixelFormat) {
		PixelFormat &pixelFormat = m_formatDescriptionTable[enumPixelFormat];

		if (pixelFormat.hasBitsPerPixel) {
			return &pixelFormat;
		}
		return 0;
	}

	typedef std::map<EnumPixelFormat, EnumPixelFormat> ENUM_PIXEL_FORMAT_MAP;

	static const ENUM_PIXEL_FORMAT_MAP ENUM_PIXEL_FORMAT_WITH_ALPHA_MAP = {
		{PIXELFORMAT_XRGB_8888, PIXELFORMAT_ARGB_8888},
		{PIXELFORMAT_XRGB_1555, PIXELFORMAT_ARGB_1555},
		{PIXELFORMAT_XRGB_4444, PIXELFORMAT_ARGB_4444},
		{PIXELFORMAT_XBGR_8888, PIXELFORMAT_ABGR_8888},
		{PIXELFORMAT_XBGR_1555, PIXELFORMAT_ABGR_1555},
		{PIXELFORMAT_XBGR_4444, PIXELFORMAT_ABGR_4444}
	};

	EnumPixelFormat PixelFormat::GetEnumPixelFormatWithAlpha(EnumPixelFormat enumPixelFormat) {
		ENUM_PIXEL_FORMAT_MAP::const_iterator enumPixelFormatMapIterator = ENUM_PIXEL_FORMAT_WITH_ALPHA_MAP.find(enumPixelFormat);
		return enumPixelFormatMapIterator == ENUM_PIXEL_FORMAT_WITH_ALPHA_MAP.end() ? enumPixelFormat : enumPixelFormatMapIterator->second;
	}

	static const ENUM_PIXEL_FORMAT_MAP ENUM_PIXEL_FORMAT_WITHOUT_ALPHA_MAP = {
		{PIXELFORMAT_ARGB_8888, PIXELFORMAT_XRGB_8888},
		{PIXELFORMAT_ARGB_1555, PIXELFORMAT_XRGB_1555},
		{PIXELFORMAT_ARGB_4444, PIXELFORMAT_XRGB_4444},
		{PIXELFORMAT_ABGR_8888, PIXELFORMAT_XBGR_8888},
		{PIXELFORMAT_ABGR_1555, PIXELFORMAT_XBGR_1555},
		{PIXELFORMAT_ABGR_4444, PIXELFORMAT_XBGR_4444}
	};

	EnumPixelFormat PixelFormat::GetEnumPixelFormatWithoutAlpha(EnumPixelFormat enumPixelFormat) {
		ENUM_PIXEL_FORMAT_MAP::const_iterator enumPixelFormatMapIterator = ENUM_PIXEL_FORMAT_WITHOUT_ALPHA_MAP.find(enumPixelFormat);
		return enumPixelFormatMapIterator == ENUM_PIXEL_FORMAT_WITHOUT_ALPHA_MAP.end() ? enumPixelFormat : enumPixelFormatMapIterator->second;
	}

	char* PixelFormat::GetPixelFormatString(EnumPixelFormat enumPixelFormat) {
		return ms_formatNames[enumPixelFormat];
	}
};